#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.4m
#  in conjunction with Tcl version 8.6
#    May 01, 2022 02:38:30 PM CDT  platform: Linux
#    May 06, 2022 04:10:37 AM CDT  platform: Linux
#    May 07, 2022 06:23:09 AM CDT  platform: Linux
#    May 07, 2022 07:18:23 AM CDT  platform: Linux
#    May 07, 2022 08:26:30 AM CDT  platform: Linux
#    May 07, 2022 09:17:46 AM CDT  platform: Linux
#    May 07, 2022 09:30:29 AM CDT  platform: Linux
#    May 09, 2022 04:36:02 AM CDT  platform: Linux
#    May 09, 2022 05:13:32 AM CDT  platform: Linux
#    May 09, 2022 10:02:05 AM CDT  platform: Linux
#    May 09, 2022 10:04:16 AM CDT  platform: Linux
#    Jun 24, 2022 12:10:23 PM CDT  platform: Linux
#    Jun 26, 2022 05:30:08 AM CDT  platform: Linux
#    Jul 13, 2022 03:28:04 AM CDT  platform: Linux
#    Aug 13, 2022 03:30:01 AM CDT  platform: Linux
#    Aug 13, 2022 03:51:22 AM CDT  platform: Linux
#    Aug 15, 2022 03:55:05 PM CDT  platform: Linux
#
# ======================================================
# Thanks to:
# https://colorhunt.co/palettes/dark
# https://wiki.tcl-lang.org/page/Changing+Widget+Colors
# ======================================================
#     ColorSetCreator_support.py
#  ------------------------------------------------------
# Created for PAGE Version 7.6
# Written by G.D. Walters
# Copyright Â© 2022 by G.D. Walters
# This source code is released under the MIT License
# ======================================================
# Version 1.9.0
# ------------------------------------------------------
# Initial Creation Date:  1 May 2022
# Last Modification Date: 16 August, 2022 05.00
# ======================================================
# Changes:
#     7 May, 2022 | Added Button Panel
#                 | Added Info form
#     9 May, 2022 | Added Internet Button
#                 | Set Notebook background?
#                 | Started ability to delete various Colorsets
#                 | Set background and foreground on Colorpicker buttons
#   12 June, 2022 | Modified Colorset viewer to support PPrint
#   14 June, 2022 | Added support for deletion of colorset from dictionary
#                 | as well as checking for default colorset missing due to deletion
#                 | Added Support for _location from GUI file.
#                 | Added a few Tk widgets to samples on main form
#   12 July, 2022 | Started using ttkwidgets color package instead of tkinter colorchooser package.
#   13 July, 2022 | MUCH MORE TO COME!!!!!!!!!
# 15 August, 2022 | Latest update.  Too many things to add.
#                 | Properly created export file.
# ------------------------------------------------------
# ToDo:
#    * Done - Add Save Colorset to JSON file
#    * Add Load Colorset from JSON file - MAYBE
#    * Done - Add View Colorset - Requires extra form
#    * Help File
#    * Done - Support for "Standard" Tk widgets
# ======================================================
# Known Issues:
#    * Fixed - Can't save to an importable file for future use in other programs
#    * Can't save to a ttk Theme/Style
# ===================================
# My import file list - non Tkinter
# ===================================
import sys
import shared
import pickle
import platform
import pprint
import os
import shutil
import datetime
import json
import webbrowser
import configparser
from ScrolledCheckedListBox import ScrolledCheckedListBox

try:
    from PIL import Image, ImageTk
except:
    print(
        'This program requires the 3rd party package Pillow (Pil) to be installed. \n Use "pip install Pillow" to install it.'
    )
    sys.exit(1)
try:
    from ttkwidgets.color import askcolor
except:
    print(
        'This program requires the 3rd party package TtkWidgets to be installed. \n Use "pip install ttkwidgets" to install it.'
    )
    sys.exit(1)

# ===================================
# PAGE generated tkinter imports
# ===================================
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

# ===================================
# Additional tkinter imports
# ===================================
# import tkinter.colorchooser as colorchooser
import tkinter.messagebox as messagebox
from tkinter.simpledialog import askstring

# ===================================
# Import the PAGE GUI file.
# ===================================
import ColorSetCreator

# ===================================================
# Declaring debug here keeps you from having to declare it as a
# global in every function that uses it.
# ===================================================
_debug = False


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = ColorSetCreator.Toplevel1(_top1)
    startup()
    # ===================================================
    # We will only show and instantiate the additional forms when needed.
    # ===================================================
    # Creates a toplevel widget.
    # global _top66, _w66
    # _top66 = tk.Toplevel(root)
    # _w66 = ColorSetCreator.Info(_top66)
    # Creates a toplevel widget.
    # global _top90, _w90
    # _top90 = tk.Toplevel(root)
    # _w90 = ColorSetCreator.CSViewer(_top90)
    # Creates a toplevel widget.
    # global _top92, _w92
    # _top92 = tk.Toplevel(root)
    # _w92 = ColorSetCreator.CSConfig(_top92)
    # Creates a toplevel widget.
    # global _top93, _w93
    # _top93 = tk.Toplevel(root)
    # _w93 = ColorSetCreator.FormExport(_top93)
    root.mainloop()


def startup():
    global version, location
    pv = platform.python_version()
    print(f"=======================================================")
    print(f"Running under Python {pv}")
    # Set the path for the icon files
    location = ColorSetCreator._location
    global path1
    path1 = location
    print(f"Program files location: {path1}")
    program_name = "ColorSet Creator"
    version = "1.9.0"
    author_name = "G.D. Walters"
    last_modified = "16 August, 2022 07.30"
    print(f"Program Name: {program_name}")
    print(f"Version: {version}")
    print(f"Author: {author_name}")
    print(f"Last Modification Date: {last_modified}")
    print(f"=======================================================")
    # ===================================================
    # If you have a single monitor, uncomment the first line and comment out the second.
    # If however, you have dual monitors, you can use the second line to force the
    #   width and height of your monitor to centre the form correctly on the active monitor
    # ===================================================
    # centre_screen(1160, 729)
    centre_screen(1160, 729, ForceWid=2560, ForceHei=1440)
    # ===================================================
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, ColorSets, CurrentSelected
    global DefaultSet
    global tkWidgets, ttkWidgets, ttkWidgets2
    # ===================================================
    # These are the sample widgets on the right side of the form.
    # This makes an easy way to set the colours as needed.
    # ===================================================
    tkWidgets = [
        _w1.Button7,
        _w1.Label2,
        _w1.Frame2,
        _w1.Checkbutton2,
        _w1.Radiobutton1,
        _w1.Labelframe1,
    ]
    ttkWidgets = [
        _w1.TButton3,
        _w1.TLabel8,
        _w1.TFrame1,
        _w1.TCheckbutton1,
        _w1.TRadiobutton1,
        _w1.TLabelframe4,
    ]
    # Load name of default color set from .ini file
    load_config()
    CurrentSelected = ""
    # ===================================================
    # Load to actual colour set file ()
    # ===================================================
    loadcolorsetfile()
    # global tkintercolors
    global tkcolors
    tkcolors = loadTkcolorsetfile()
    if _debug:
        print(f"tkcolors type: {type(tkcolors)}")
    do_bindings()

    LoadCombo()
    titl = f"{program_name} Version {version}"
    root.title(titl)
    set_backgrounds()
    setup_buttons()
    set_icon(_top1)
    # ===================================

    # ttkWidgets2 = [
    #     _w92.ConfTButton1,
    #     _w92.ConfTCheckbutton1,
    #     _w92.ConfTRadiobutton1,
    #     _w92.ConfTNotebook1,
    # ]
    # ===================================
    # centre_screen(1160, 729, ForceWid=2560, ForceHei=1440)
    global timer_id
    timer_id = root.after(0, on_time_update)

    # getttkinfo()
    # =================================================
    # End of startup function
    # ===================================================


def load_config():
    global DefaultSet
    config = configparser.ConfigParser()
    config.read("CSC.ini")
    sections = config.sections()
    DefaultSet = config["BOOT"]["ColorSet"]
    target = config["BOOT"]["AutoCompTarget"]
    shared.whichset = DefaultSet
    shared.target = target
    if _debug:
        print(f"DefaultColorSet: {DefaultSet}")
        print(f'AutoCompTarget: {target}')


def save_config(whichset):
    global DefaultSet
    titl = "ColorSetCreator Save Default"
    msg = "This will change your saved default set.  Continue?"
    resp = messagebox.askyesno(titl,
                               msg,
                               icon=messagebox.QUESTION,
                               parent=root)
    if resp == True:
        shared.whichset = whichset
        config = configparser.ConfigParser()
        config["BOOT"] = {
            "ColorSet": shared.whichset,
            "AutoCompTarget": shared.target
        }
        with open("CSC.ini", "w") as configfile:
            config.write(configfile)
        msg = "Default ColorSet saved"
        messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=root)


def loadcolorsetfile2():
    """
    Loads the tkinterColors.pickle file
    """
    global ColorSets
    # ===================================================
    # Reads Pickle file as protocol 4
    # ===================================================
    with open("tkinterColors.pickle", "rb") as file:
        tkintercolorset = pickle.load(file)
        return tkintercolorset


def setup_buttons():
    """
    This function sets the background and foreground attributes for the six small buttons that
    call the SelectColor dialog
    """
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, ColorSets, CurrentSelected
    style = ttk.Style()
    _w1.Button1.config(bg=lastbg1)
    _w1.Button1.config(fg=lastfg1)
    _w1.Button2.config(bg=lastbg2)
    _w1.Button2.config(fg=lastfg2)
    _w1.Button3.config(bg=lastbg3)
    _w1.Button3.config(fg=lastfg3)
    _w1.Button4.config(bg=lastbg1)
    _w1.Button4.config(fg=lastfg1)
    _w1.Button5.config(bg=lastbg2)
    _w1.Button5.config(fg=lastfg2)
    _w1.Button6.config(bg=lastbg3)
    _w1.Button6.config(fg=lastfg3)
    style.configure("MyTButton.TButton",
                    background=lastbg1,
                    foreground=lastfg1)
    _w1.TButton3.configure(style="MyTButton.TButton")
    root.update()


def set_backgrounds():
    """
    This function sets the background colors for each of the major widgets on
    the Toplevel.  Currently set to 'DarkChocolate' colorset.  Will probably die
    if 'DarkChocolate' does not exist in the colorset list.
    """
    ColorSetToUse = "DarkChocolate"
    colors = ColorSets[ColorSetToUse]
    style = ttk.Style()
    if _debug:
        print(colors)
    # bg = colors['BG1']['active']
    # fg = colors['FG1']['active']
    # print(f'BG: {bg} FG: {fg}')
    # bg = '#5c3d23'
    bg = "gray53"
    fg = "black"
    _top1.config(background=bg)
    _w1.frameBtnBar.config(background=bg)
    # _w1.TNotebook1.config(background=bg)
    style.map(
        "TNotebook",
        background=[("selected", bg), ("active", bg), ("!active", bg)],
        foreground=[("selected", fg), ("active", "black"),
                    ("!active", "black")],
    )
    _w1.TNotebook1_t1.config(background=bg)
    _w1.TNotebook1_t2.config(background=bg)
    _w1.TNotebook1_t3.config(background=bg)
    _w1.TNotebook1_t4.config(background=bg)
    _w1.TNotebook1_t5.config(background=bg)
    _w1.lblStatusInfo1.config(background=bg)
    _w1.lblStatusInfo2.config(background=bg)
    _w1.lblStatusTime.config(background=bg)
    _w1.lblStatusInfo1.config(fg=fg)
    _w1.lblStatusInfo2.config(fg=fg)
    _w1.lblStatusTime.config(fg=fg)
    _w1.TLabel1.configure(background=bg)
    _w1.Checkbutton1.configure(background=bg)
    _w1.StatusInfo1.set("")
    _w1.StatusInfo2.set("")


def on_time_update():
    # ======================================================
    # Callback function for the Time display
    # ======================================================
    global timer_id
    nowstring = f"{datetime.datetime.now():%X}"
    _w1.StatusTime.set(nowstring)
    timer_id = root.after(500, on_time_update)


def do_bindings():
    """
    Bind the combobox and TEntry widgets
    """
    _w1.TCombobox1.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect())
    _w1.TEntry1.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 1))
    _w1.TEntry2.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 2))
    _w1.TEntry3.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 3))
    _w1.TEntry4.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 4))
    _w1.TEntry5.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 5))
    _w1.TEntry6.bind("<KeyRelease>", lambda e: on_TEntryKeyPress(e, 6))


def on_TEntryKeyPress(*args):

    # if _debug:
    #     for arg in args:
    #         print("another arg:", arg)
    """
    This is the callback for each of the Entry widgets on the main Toplevel form.
    Notice that the first three only deal with the background color while the last
    three deal with the foreground color, but set both
    """
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, ColorSets
    which = args[1]
    if args[0].keysym == "Return":
        if which == 1:
            dat = _w1.TEntry1Data.get()
            lastbg1 = dat
            _w1.Button1.config(background=lastbg1)
            colorname, hexval, rgbval, suggested = get_the_data(0, dat)
            if _debug:
                print(
                    f"Colorname: {colorname} - HexVal: {hexval} - RGB: {rgbval} - Suggested: {suggested}"
                )
                print(_w1.che47.get())
            if _w1.che47:
                _w1.Button1.config(foreground=suggested)
                _w1.Button4.config(background=suggested)
                _w1.TEntry4Data.set(get_key(hex_to_rgb(suggested)))

        if which == 2:
            dat = _w1.TEntry2Data.get()
            lastbg2 = dat
            _w1.Button2.config(background=lastbg2)
            colorname, hexval, rgbval, suggested = get_the_data(0, dat)
            if _w1.che47:
                _w1.Button2.config(foreground=suggested)
                _w1.Button5.config(background=suggested)
                _w1.TEntry5Data.set(get_key(hex_to_rgb(suggested)))
        if which == 3:
            dat = _w1.TEntry3Data.get()
            lastbg3 = dat
            _w1.Button3.config(background=lastbg3)
            colorname, hexval, rgbval, suggested = get_the_data(0, dat)
            if _w1.che47:
                _w1.Button3.config(foreground=suggested)
                _w1.Button6.config(background=suggested)
                _w1.TEntry6Data.set(get_key(hex_to_rgb(suggested)))
        if which == 4:
            dat = _w1.TEntry4Data.get()
            lastfg1 = dat
            _w1.Button4.config(background=lastbg1)
            _w1.Button4.config(foreground=lastfg1)
        if which == 5:
            dat = _w1.TEntry5Data.get()
            lastfg2 = dat
            _w1.Button5.config(background=lastbg2)
            _w1.Button5.config(foreground=lastfg2)
        if which == 6:
            dat = _w1.TEntry6Data.get()
            lastfg3 = dat
            _w1.Button6.config(background=lastbg3)
            _w1.Button6.config(foreground=lastfg3)
    root.update()
    # if _debug:
    # print(f"Which: {which},{args[0]}")


def getttkinfo():
    """Not currently used for anything.  For future use only."""
    if _debug:
        s = ttk.Style()
        print("=======================================")
        layout = s.layout("TButton")
        print(f"Layout information for TButton ---")
        print("------------------------------------")
        print(layout)
        print("------------------------------------")
        print("Element_options for Button.border...")
        opt = s.element_options("Button.border")
        print(opt)
        print("  --- Button.label ---")
        opt = s.element_options("Button.label")
        print(opt)
        print("------------------------------------")
        layout = s.layout("TCheckbutton")
        print(f"Layout information for TCheckbutton ---")
        print("------------------------------------")
        print(layout)
        print("------------------------------------")
        print("Element_options for Checkbutton.padding...")
        opt = s.element_options("Checkbutton.padding")
        print(opt)
        print("  --- CheckButton.indicator ---")
        opt = s.element_options("Checkbutton.indicator")
        print(opt)
        print("  --- CheckButton.lable ---")
        opt = s.element_options("Checkbutton.label")
        print(opt)
        print("------------------------------------")
        # print(layout)
        layout = s.layout("TEntry")
        print("Layout information for TEntry ---")
        print(layout)
        print("------------------------------------")
        print("  --- TEntry.field --- ")
        opt = s.element_options("Entry.field")
        print(opt)
        print("  --- TEntry.textarea --- ")
        opt = s.element_options("Entry.textarea")
        print(opt)
        print("------------------------------------")
        # print(layout)
        print("TFrame")
        layout = s.layout("TFrame")
        print(layout)
        layout = s.layout("TLabel")
        print(layout)
        layout = s.layout("TLabelframe")
        print(layout)
        layout = s.layout("TPanedwindow")
        print(layout)
        layout = s.layout("TRadiobutton")
        print(layout)
        layout = s.layout("Horizontal.TScale")
        print(layout)
        layout = s.layout("Horizontal.TScrollbar")
        print(layout)
        layout = s.layout("TCombobox")
        print(layout)
        layout = s.layout("TNotebook")
        print(layout)
        layout = s.layout("Horizontal.TProgressbar")
        print(layout)
        layout = s.layout("TSeparator")
        print(layout)
        layout = s.layout("Treeview")
        print(layout)
        print("===============================================")
        print("")
        print("----------------------------------------")
        print("Finished")


def loadcolorsetfile():

    global ColorSets
    # ===================================================
    # Reads Pickle file as protocol 4
    # ===================================================
    with open("mycolorset.pickle", "rb") as file:
        loadedcolorset = pickle.load(file)
    ColorSets = loadedcolorset
    # print(ColorSets)
    if _debug:
        print(ColorSets)
        print(type(ColorSets))


def LoadCombo():

    global SetList, CurrentSelected, DefaultSet, ColorSets
    # =============================================
    _w1.TCombobox1["values"] = []
    SetList = list(ColorSets.keys())
    # SetList = [*ColorSets]
    # SetList.sort(reverse=False)
    if _debug:
        print(SetList)
    _w1.TCombobox1["values"] = SetList
    if CurrentSelected in ColorSets:
        pass
    else:
        CurrentSelected = ""
    if CurrentSelected != "":
        item = CurrentSelected
        index = SetList.index(CurrentSelected)
        _w1.TCombobox1.current(index)
        _w1.TCombobox1.set(SetList[index])
    else:
        if DefaultSet in ColorSets:
            index = SetList.index(DefaultSet)
            _w1.TCombobox1.current(index)
            _w1.TCombobox1.set(SetList[index])
        else:
            titl = "ColorSetCreator"
            msg = f"{DefaultSet} is no longer in the ColorSet.  \nPlease set another ColorSet as your default."
            messagebox.showwarning(titl,
                                   msg,
                                   icon=messagebox.WARNING,
                                   parent=root)
            index = 0
    _w1.TCombobox1.current(index)
    _w1.TCombobox1.set(SetList[index])
    on_ComboSelect()


def on_ComboSelect():

    global ColorSets
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, CurrentSelected
    # =====================================================
    selected = _w1.combobox.get()
    CurrentSelected = selected
    if _debug:
        print(f"Combobox Select: {selected}")
    set = ColorSets[selected]
    if _debug:
        print(set)
    lastbg1 = set["BG1"]
    lastbg2 = set["BG2"]
    lastbg3 = set["BG3"]
    lastfg1 = set["FG1"]
    lastfg2 = set["FG2"]
    lastfg3 = set["FG3"]
    _w1.TEntry1Data.set(lastbg1)
    _w1.TEntry2Data.set(lastbg2)
    _w1.TEntry3Data.set(lastbg3)
    _w1.TEntry4Data.set(lastfg1)
    _w1.TEntry5Data.set(lastfg2)
    _w1.TEntry6Data.set(lastfg3)
    set_colors()
    setup_buttons()


def on_ApplyColors(*args):

    if _debug:
        print("ColorSetCreator_support.on_ApplyColors")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    set_colors()


def on_SaveNewColorSet(*args):

    if _debug:
        print("ColorSetCreator_support.on_SaveNewColorSet")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    ok = False
    while ok != True:
        response = askstring("ColorSet Creator",
                             "Please enter a name for your new ColorSet")
        keys = list(ColorSets.keys())
        if response in keys:
            print(f"Duplicate found for {response}")
            titl = "ColorSet Error"
            msg = "Duplicate ColorSet Name"
            messagebox.showerror(titl,
                                 msg,
                                 parent=_top1,
                                 icon=messagebox.ERROR)
        else:
            ok = True
    newset = {
        response: {
            "BG1": lastbg1,
            "BG2": lastbg2,
            "BG3": lastbg3,
            "FG1": lastfg1,
            "FG2": lastfg2,
            "FG3": lastfg3,
        }
    }
    ColorSets.update(newset)
    if _debug:
        print(ColorSets)
    # ===================================================
    # Saves Pickle file as protocol 4 for compatability
    # ===================================================
    with open("mycolorset.pickle", "wb") as file:
        pickle.dump(ColorSets, file, pickle.DEFAULT_PROTOCOL)
    LoadCombo()
    titl = "Save ColorSet"
    msg = f'New colorset "{response}" saved to ColorSet and Reloaded into Combobox'
    messagebox.showinfo(titl, msg, parent=root, icon=messagebox.INFO)


def on_bgColor(*args):

    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3
    # =================================================
    if _debug:
        print("ColorSetCreator_support.on_bgColor")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()

    # sty = ttk.Style()
    which = args[0]
    if which == 1:
        colr = lastbg1
    elif which == 2:
        colr = lastbg2
    elif which == 3:
        colr = lastbg3
    # tkinter colorchooser has been replaced in the code with the ttkwidgets askcolor package
    result = askcolor(colr,
                      title=f"Enter Color for Background #{which}",
                      parent=root,
                      alpha=True)
    if _debug:
        print(f"Result: {result}")
    # If user clicks [Cancel], the colorchooser dialog returns None,None.
    # Don't change anything!
    if result[1] != None:
        hex1 = result[1]
        hex = hex1[:7]
        lastcolor = hex
        if which == 1:
            colorname, hexval, rgbval, suggested = get_the_data(1, lastcolor)
            _w1.TEntry1Data.set(hexval)
            lastbg1 = hexval
            _w1.Button1.configure(background=lastbg1)
            if _w1.che47.get():
                _w1.Button1.configure(fg=suggested)
                _w1.Button4.configure(bg=suggested)
                _w1.TEntry4Data.set(get_key(hex_to_rgb(suggested)))
        elif which == 2:
            colorname, hexval, rgbval, suggested = get_the_data(1, lastcolor)
            _w1.TEntry2Data.set(hexval)
            lastbg2 = hexval
            _w1.Button2.configure(background=lastbg2)
            if _w1.che47.get():
                _w1.Button2.configure(fg=suggested)
                _w1.Button5.configure(bg=suggested)
                _w1.TEntry5Data.set(get_key(hex_to_rgb(suggested)))
        elif which == 3:
            colorname, hexval, rgbval, suggested = get_the_data(1, lastcolor)
            _w1.TEntry3Data.set(hexval)
            lastbg3 = hexval
            _w1.Button3.configure(background=lastbg3)
            if _w1.che47.get():
                _w1.Button3.configure(fg=suggested)
                _w1.Button6.configure(bg=suggested)
                _w1.TEntry6Data.set(get_key(hex_to_rgb(suggested)))
        root.update()


def on_fgColor(*args):

    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3
    # =================================================
    if _debug:
        print("ColorSetCreator_support.on_fgColor")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()

    sty = ttk.Style()
    which = args[0]
    if which == 1:
        colr = lastfg1
    elif which == 2:
        colr = lastfg2
    elif which == 3:
        colr = lastfg3
    # tkinter colorchooser has been replaced in the code with the ttkwidgets askcolor package
    result = askcolor(colr,
                      title=f"Enter Color for Background #{which}",
                      parent=root,
                      alpha=True)
    if _debug:
        print(f"Result: {result}")
    # If user clicks [Cancel], the colorchooser dialog returns None,None.
    # Don't change anything!
    if result[1] != None:
        hex1 = result[1]
        hex = hex1[:7]
        lastcolor = hex
        if _debug:
            print(f"LastFG1: {lastfg1}")
        if which == 1:
            _w1.TEntry4Data.set(lastcolor)
            lastfg1 = lastcolor
        elif which == 2:
            _w1.TEntry5Data.set(lastcolor)
            lastfg2 = lastcolor
            sty.configure("TButton", foreground=lastcolor)
            # _w1.TButton3.config(foreground=lastcolor)
        elif which == 3:
            _w1.TEntry6Data.set(lastcolor)
            lastfg3 = lastcolor
            # _w1.TButton4.config(foreground=lastcolor)
        setup_buttons()
        root.update()


def on_btnExit(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnExit")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    # root.destroy()
    sys.exit()


def set_colors():

    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3
    # =================================================
    style = ttk.Style()
    # style.theme_create(
    #     'temp',
    #     parent='default',
    #     settings={
    #         'TLabelframe': {
    #             'configure': {
    #                 'background': lastbg1,
    #                 'relief': 'raised',
    #                 'bordercolor': lastfg1,
    #                 'borderwidth': 2
    #             }
    #         },
    #         'TLabelframe.Label': {
    #             'configure': {
    #                 'foreground': lastfg1,
    #                 'background': lastbg1
    #             }
    #         },
    #         'TLabel': {
    #             'configure': {
    #                 'foreground': lastfg1,
    #                 'background': lastbg1,
    #                 'relief': 'raised',
    #                 'bordercolor': lastfg1,
    #                 'borderwidth': 2
    #             }
    #         },
    #         #    'TNotebook': {
    #         #        'configure': {
    #         #            'bordercolor': lastfg1,
    #         #            'borderwidth': 2,
    #         #            'background': lastbg1,
    #         #            'foreground': lastfg1
    #         #        }
    #         #    },
    #         #    'TNotebook.Tab': {
    #         #        "background": [('selected', lastbg1),
    #         #                       ('active', lastbg2),
    #         #                       ('!active', lastbg3)],
    #         #        'foreground': [('selected', lastfg1),
    #         #                       ('active', lastfg2),
    #         #                       ('!active', lastfg3)]
    #         #    }
    #     })

    # style.theme_use('temp')
    if _debug:
        print(f"Lastbg1: {lastbg1}, Lastfg1: {lastfg1}")
    style.map(
        "TNotebook.Tab",
        background=[("selected", lastbg1), ("active", lastbg2),
                    ("!active", lastbg3)],
        foreground=[("selected", lastfg1), ("active", lastfg2),
                    ("!active", lastfg3)],
    )
    style.map(
        "TButton",
        background=[
            ("active", lastbg2),
            ("disabled", "gray76"),
            ("readonly", "firebrick2"),
        ],
        foreground=[("active", lastfg2), ("disabled", lastfg1),
                    ("readonly", lastfg3)],
    )
    # _w1.TButton3.configure(background=lastbg1, foreground=lastfg1)

    style.configure("MyTButton.TButton",
                    background=lastbg1,
                    foreground=lastfg1)
    _w1.TButton3.configure(style="MyTButton.TButton")
    style.map(
        "TLabelFrame",
        background=[("selected", lastbg1), ("active", lastbg2),
                    ("!active", lastbg3)],
        foreground=[("selected", lastfg1), ("active", lastfg2),
                    ("!active", lastfg3)],
    )
    style.map(
        "TCheckbutton",
        background=[("active", lastbg2), ("disabled", "gray76")],
        foreground=[("active", lastfg2), ("disabled", lastfg2)],
    )
    style.configure("MyTcheck.TCheckbutton",
                    background=lastbg1,
                    foreground=lastfg1)
    _w1.TCheckbutton1.configure(style="MyTcheck.TCheckbutton")
    style.map(
        "TRadiobutton",
        background=[("active", lastbg2), ("disabled", "gray76")],
        foreground=[("active", lastfg2), ("disabled", lastfg2)],
    )
    _w1.TRadiobutton1.configure(style="MyTcheck.TCheckbutton")

    style.configure("MyTLabelFrame.TLabelframe",
                    background=lastbg1,
                    foreground=lastfg1)
    style.configure("MyTLabelFrame.TLabelframe.Label",
                    background=lastbg1,
                    foreground=lastfg1)
    _w1.TLabelframe4.configure(style="MyTLabelFrame.TLabelframe")
    style.configure("MyTFrame.TFrame", background=lastbg1)
    _w1.TFrame1.configure(style="MyTFrame.TFrame")
    # style.configure('MyTLabel.TLabel', background=lastbg1, foreground=lastfg1)
    _w1.TLabel8.configure(background=lastbg1, foreground=lastfg1)
    # style.theme_create(
    #     'Special',
    #     settings={'TLabelframe': {
    #         'configure': {
    #             'background': lastbg1
    #         }
    #     }},
    #     'TLabelframe.Lable':{'configure':{'background':lastbg1}})
    # _w1.TLabelframe4.config(style='Special')
    # style.map('TRadiobutton',
    #           background=[('selected', lastbg1), ('active', lastbg2),
    #                       ('!active', lastbg3)],
    #           foreground=[('selected', lastfg1), ('active', lastfg2),
    #                       ('!active', lastfg3)])

    # labellist = [
    #     _w1.TLabel1,
    #     _w1.TLabel2,
    #     _w1.TLabel3,
    #     _w1.TLabel4,
    #     _w1.TLabel5,
    #     _w1.TLabel6,
    #     _w1.TLabel7,
    # ]
    # for lab in labellist:
    #     lab.configure(background=lastbg3)
    #     lab.configure(foreground=lastfg1)
    # global tkWidgets, ttkWidgets, ttkWidgets2
    # for tkwid in tkWidgets:
    #     tkwid.config(background=lastbg1, foreground=lastfg1)
    global tkWidgets, ttkWidgets, ttkWidgets2
    for tkwid in tkWidgets:
        tkwid.configure(background=lastbg1)
        if _debug:
            print(f"Working: {tkwid.winfo_class()}")
        # Don't try to set the foreground (text) colour of the Tk::Frame
        # or activebackground on the Tk::Labelframe.
        if tkwid.winfo_class() == "Frame":
            pass
        elif tkwid.winfo_class() != "Labelframe":
            tkwid.configure(activebackground=lastbg2)
            tkwid.configure(foreground=lastfg1)
        else:
            tkwid.configure(foreground=lastfg1)
    root.update()


def on_chkDisableWidgets(*args):
    if _debug:
        print("ColorSetCreator_support.on_chkDisableWidgets")
    global tkWidgets
    if _debug:
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    if _w1.che46.get():
        _w1.TButton3.config(state=DISABLED)
        _w1.TCheckbutton1.config(state=DISABLED)
        _w1.TRadiobutton1.config(state=DISABLED)
        for tkwid in tkWidgets:
            if _debug:
                print(tkwid.winfo_class())
            if (tkwid.winfo_class() == "Frame") or (tkwid.winfo_class()
                                                    == "Labelframe"):
                pass
            else:
                tkwid.configure(state=DISABLED)
    else:
        _w1.TButton3.config(state=NORMAL)
        _w1.TCheckbutton1.config(state=NORMAL)
        _w1.TRadiobutton1.config(state=NORMAL)
        for tkwid in tkWidgets:
            if _debug:
                print(tkwid.winfo_class())
            if (tkwid.winfo_class() == "Frame") or (tkwid.winfo_class()
                                                    == "Labelframe"):
                pass
            else:
                tkwid.configure(state=NORMAL)


def on_btnHelp(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnHelp")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    titl = "ColorSet Creator Help"
    msg = "Sorry, but the Help function is not yet finished."
    messagebox.showinfo(titl, msg, parent=_top1, icon=messagebox.INFO)


def on_btnInfo(*args):
    global version
    if _debug:
        print("ColorSetCreator_support.on_btnInfo")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    global _top66, _w66
    _top66 = tk.Toplevel(root)
    _w66 = ColorSetCreator.Info(_top66)
    _w66.AuthorData.set("Gregory D. Walters")
    _w66.InfoVersionData.set(version)
    about = """This program was created to help you design color sets for PAGE Projects using ttk widgets (and even standard Tk widgets).

Copyright Â© 2022 by G.D. Walters
All Rights Reserved Worldwide

This software is released under the MIT License
    """
    _w66.InfoAboutData.set(about)
    set_icon(_top66)


def on_btnInfoDismiss(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnInfoDismiss")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    _top66.withdraw()


def on_btnLoadFromJSON(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnLoadFromJSON")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    titl = "ColorSet Creator Load From JSON File"
    msg = "Sorry, but the Load From JSON File function is not yet finished."
    messagebox.showinfo(titl, msg, parent=_top1, icon=messagebox.INFO)


def on_btnSaveToJSON(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnSaveToJSON")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    titl = "Save To JSON File"
    mesg = "This will save the colorset information to a JSON File.\nAre you sure you want to do this?"
    resp = messagebox.askyesnocancel(titl,
                                     mesg,
                                     parent=_top1,
                                     icon=messagebox.QUESTION)
    if _debug:
        print(resp)
    if resp == True:
        with open("colorsets.json", "w") as outfile:
            json.dump(ColorSets, outfile)
    _w1.StatusInfo1.set("JSON file saved!")


def on_btnViewerDismiss(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnViewerDismiss")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    _top90.withdraw()


def clear_ScrolledText():
    _w90.Scrolledtext1.delete(1.0, END)


def on_btnViewer(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnViewer")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    import io

    buffer = io.StringIO()
    global _top90, _w90
    _top90 = tk.Toplevel(root)
    _w90 = ColorSetCreator.CSViewer(_top90)
    clear_ScrolledText()
    dat = pprint.pformat(ColorSets, depth=2, compact=True)

    chars_to_remove = ["{", "}", "'"]
    for char in chars_to_remove:
        dat = dat.replace(char, "")

    _w90.Scrolledtext1.insert(END, dat)
    set_icon(_top90)


def on_btnInternet(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnInternet")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    url = "https://colorhunt.co/palette"
    webbrowser.open_new(url)


def on_btnReturn(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnReturn")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    _w1.TNotebook1.select(0)


def on_ConfigBtnDelete(*args):
    if _debug:
        print("ColorSetCreator_support.on_ConfigBtnDelete")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    """
    This will remove a colorset from the dictionary and re-write the pickle file
    """
    """
    Steps:
       1) get currently selected item from the combobox
       2) Ask user if they are sure
       3) if yes, delete colorset
       3a) if no, fall out of routine
       4) reload combobox
       5) write modified pickle
       6) inform user process finished.
    """
    widget = _w92.TCombobox2
    selected = _w92.comboToDelete.get()
    CurrentSelected = selected
    msg = f"This will delete {CurrentSelected} from the ColorSet.\nAre you sure you want to do this?"
    titl = "Delete Colorset"
    if _debug:
        print(f"CurrentSelected: {CurrentSelected}")
        print(titl)
        print(msg)
    # show ask message box
    resp = messagebox.askyesno(titl,
                               msg,
                               icon=messagebox.QUESTION,
                               parent=_top92)
    if resp == True:
        shutil.copyfile("mycolorset.pickle", "mycolorset.pickle.bak")
        try:
            ColorSets.pop(CurrentSelected)
            # re-write pickle file
            with open("mycolorset.pickle", "wb") as file:
                pickle.dump(ColorSets, file, pickle.DEFAULT_PROTOCOL)
            # Reload the colorset into all the comboboxes
            LoadCombo()
            LoadCombo2()
            msg = f"{CurrentSelected} was removed from ColorSet."
            messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top92)
        except:
            print(f"Error removing {CurrentSelected} from dictionary")
            # show error messagebox
            msg = f"An error occured when trying to delete {CurrentSelected} from ColorSet."
            messagebox.showerror(titl,
                                 msg,
                                 icon=messagebox.ERROR,
                                 parent=_top92)


def on_ConfigBtnDismiss(*args):
    if _debug:
        print("ColorSetCreator_support.on_ConfigBtnDismiss")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    _top92.withdraw()


def on_ConfigBtnSet(*args):
    if _debug:
        print("ColorSetCreator_support.on_ConfigBtnSet")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    global CurrentSelected
    save_config(CurrentSelected)


def on_btnConfig(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnConfig")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    global _top92, _w92
    _top92 = tk.Toplevel(root)
    _w92 = ColorSetCreator.CSConfig(_top92)
    _w92.TCombobox2.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect2())
    _w92.TCombobox3.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect3())
    _w92.Label9.bind("<Button-1>", lambda e: on_hyperlink1())
    # _w92.TCombobox4.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect4())
    LoadCombo2()
    _w92.AutoCompTarget.set(shared.target)
    set_icon(_top92)


def LoadCombo2():

    global SetList, CurrentSelected, DefaultSet
    # =============================================
    _w92.TCombobox2["values"] = []
    _w92.TCombobox3["values"] = []
    # _w92.TCombobox4["values"] = []
    SetList = list(ColorSets.keys())
    # SetList=[*ColorSets]
    # SetList.sort(reverse=False)
    if _debug:
        print(SetList)
    _w92.TCombobox2["values"] = SetList
    _w92.TCombobox3["values"] = SetList
    # _w92.TCombobox4["values"] = SetList
    if CurrentSelected != "":
        item = CurrentSelected
        index = SetList.index(CurrentSelected)
        _w92.TCombobox2.current(index)
        _w92.TCombobox2.set(SetList[index])
        _w92.TCombobox3.current(index)
        _w92.TCombobox3.set(SetList[index])
        # _w92.TCombobox4.current(index)
        # _w92.TCombobox4.set(SetList[index])
    else:
        index = SetList.index(DefaultSet)
        _w92.TCombobox2.current(index)
        _w92.TCombobox2.set(SetList[index])
        _w92.TCombobox3.current(index)
        _w92.TCombobox3.set(SetList[index])
    _w92.TCombobox2.current(index)
    _w92.TCombobox2.set(SetList[index])
    _w92.TCombobox3.current(index)
    _w92.TCombobox3.set(SetList[index])
    # _w92.TCombobox4.current(index)
    # _w92.TCombobox4.set(SetList[index])
    on_ComboSelect2()


def on_ComboSelect2():
    if _debug:
        print("on_ComboSelect2")

    global ColorSets
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, CurrentSelected
    # =====================================================
    selected = _w92.comboStartupSet.get()
    CurrentSelected = selected
    if _debug:
        print(f"Combobox Select: {selected}")
    set = ColorSets[selected]
    if _debug:
        print(set)
    # print(set)
    lastbg1 = set["BG1"]
    lastbg2 = set["BG2"]
    lastbg3 = set["BG3"]
    lastfg1 = set["FG1"]
    lastfg2 = set["FG2"]
    lastfg3 = set["FG3"]

    set_colors2()


def on_ComboSelect3():
    global ColorSets
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, CurrentSelected
    # =====================================================
    selected = _w92.comboToDelete.get()
    CurrentSelected = selected
    if _debug:
        print(f"Combobox Select: {selected}")
    set = ColorSets[selected]
    if _debug:
        print(set)
    lastbg1 = set["BG1"]
    lastbg2 = set["BG2"]
    lastbg3 = set["BG3"]
    lastfg1 = set["FG1"]
    lastfg2 = set["FG2"]
    lastfg3 = set["FG3"]
    set_colors2()


def on_ComboSelect4():
    if _debug:
        print("on_ComboSelect4")

    global ColorSets
    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3, CurrentSelected
    # =====================================================
    selected = _w92.comboToCopy.get()
    if _debug:
        print(selected)
    CurrentSelected = selected
    if _debug:
        print(f"Combobox Select: {selected}")
    set = ColorSets[selected]

    if _debug:
        print(set)
    lastbg1 = set["BG1"]
    lastbg2 = set["BG2"]
    lastbg3 = set["BG3"]
    lastfg1 = set["FG1"]
    lastfg2 = set["FG2"]
    lastfg3 = set["FG3"]
    set_colors2()


def set_colors2():

    global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3
    # =================================================
    style = ttk.Style()

    if _debug:
        print(f"Lastbg1: {lastbg1}, Lastfg1: {lastfg1}")
    style.map(
        "TNotebook.Tab",
        background=[("selected", lastbg1), ("active", lastbg2),
                    ("!active", lastbg3)],
        foreground=[("selected", lastfg1), ("active", lastfg2),
                    ("!active", lastfg3)],
    )
    style.map(
        "TButton",
        background=[
            ("active", lastbg2),
            ("disabled", "gray76"),
            ("readonly", "firebrick2"),
        ],
        foreground=[("active", lastfg2), ("disabled", lastfg1),
                    ("readonly", lastfg3)],
    )
    # _w1.TButton3.configure(background=lastbg1, foreground=lastfg1)

    style.configure("MyTButton.TButton",
                    background=lastbg1,
                    foreground=lastfg1)
    _w92.ConfTButton1.configure(style="MyTButton.TButton")
    style.map(
        "TLabelFrame",
        background=[("selected", lastbg1), ("active", lastbg2),
                    ("!active", lastbg3)],
        foreground=[("selected", lastfg1), ("active", lastfg2),
                    ("!active", lastfg3)],
    )
    style.map(
        "TCheckbutton",
        background=[("active", lastbg2), ("disabled", "gray76")],
        foreground=[("active", lastfg2), ("disabled", lastfg2)],
    )
    style.configure("MyTcheck.TCheckbutton",
                    background=lastbg1,
                    foreground=lastfg1)
    _w92.ConfTCheckbutton1.configure(style="MyTcheck.TCheckbutton")
    style.map(
        "TRadiobutton",
        background=[("active", lastbg2), ("disabled", "gray76")],
        foreground=[("active", lastfg2), ("disabled", lastfg2)],
    )
    _w92.ConfTRadiobutton1.configure(style="MyTcheck.TCheckbutton")

    style.configure("MyTLabelFrame.TLabelframe",
                    background=lastbg1,
                    foreground=lastfg1)
    style.configure("MyTLabelFrame.TLabelframe.Label",
                    background=lastbg1,
                    foreground=lastfg1)
    # _w1.TLabelframe4.configure(style='MyTLabelFrame.TLabelframe')
    style.configure("MyTFrame.TFrame", background=lastbg1)
    # _w1.TFrame1.configure(style='MyTFrame.TFrame')
    # style.configure('MyTLabel.TLabel', background=lastbg1, foreground=lastfg1)
    # _w1.TLabel8.configure(background=lastbg1, foreground=lastfg1)
    root.update()


def on_btnExportSet(*args):
    """This function will create an importable file for use with future PAGE projects."""
    if _debug:
        print("ColorSetCreator_support.on_btnExportSet")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # Add code here 7/7/22

    # Get the set to export from the combobox
    selectedcolorset = {}
    expcolorset = selectedcolorset
    # Get/make the filename

    # Write the base colorset

    with open("colorset.py", "w") as data:
        data.write(str(expcolorset))


def on_btnGetInfo(*args):
    print("ColorSetCreator_support.on_btnGetInfo")
    for arg in args:
        print("    another arg:", arg)
    sys.stdout.flush()
    getttkinfo()


def set_icon(which):
    # ======================================================
    # Sets the application icon...
    # ======================================================
    # global p1
    # p1 = tk.Image("photo", file='images/chef.png')
    global path1
    global p1
    img = os.path.join(location, "Assets", "applications-graphics.png")
    p1 = ImageTk.PhotoImage(file=img)
    # root.tk.call("wm", "iconphoto", root._w, p1)
    which.tk.call("wm", "iconphoto", which._w, p1)


def centre_screen(wid, hei, ForceWid=None, ForceHei=None):
    if (ForceWid == None) and (ForceHei == None):
        ws = root.winfo_screenwidth()
        hs = root.winfo_screenheight()
    else:
        ws = ForceWid
        hs = ForceHei
    x = (ws / 2) - (wid / 2)
    y = (hs / 2) - (hei / 2)
    root.geometry("%dx%d+%d+%d" % (wid, hei, x, y))


def on_AutoComputeFG(*args):
    print("ColorSetCreator_support.on_AutoComputeFG")
    for arg in args:
        print("    another arg:", arg)
    sys.stdout.flush()
    # global lastbg1, lastbg2, lastbg3, lastfg1, lastfg2, lastfg3
    # if _w1.che47:
    #     acbg1 = hex_to_rgb(lastbg1)
    #     fgx1 = pick_text_color_based_on_bg_simple(acbg1)
    #     lastfg1 = fgx1
    #     acbg2 = hex_to_rgb(lastbg2)
    #     fgx2 = pick_text_color_based_on_bg_simple(acbg2)
    #     lastfg2 = fgx2
    #     acbg3 = hex_to_rgb(lastbg3)
    #     fgx3 = pick_text_color_based_on_bg_simple(acbg3)
    #     lastfg3 = fgx3


def pick_text_color_based_on_bg_simple(bgRed, bgGreen, bgBlue):
    # Source for this function is rewritten from a discussion at
    # https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color/3943023#3943023
    # target = 186
    global AutoCompTarget
    target = AutoCompTarget
    # target = 150
    darkcolor = "#000000"
    lightcolor = "#ffffff"

    suggestion = (bgRed * 0.299) + (bgGreen * 0.587) + (bgBlue * 0.114)
    print(f"Suggestion: {suggestion}")
    if suggestion > target:
        print(f"Suggested FG: {darkcolor}")
        return darkcolor
    else:
        print(f"Suggested FG: {lightcolor}")
        return lightcolor


def get_key(val):
    global tkcolors
    for key, value in tkcolors.items():
        if val == value:
            return key
    print("not found")


def get_val(key1):
    global tkcolors
    print(type(tkcolors))
    for key, value in tkcolors.items():
        if key.upper() == key1.upper():
            return value
    print("not found")


def _from_rgb(rgb):
    """translates an rgb tuple of int to a tkinter friendly color code"""
    r, g, b = rgb
    return f"#{r:02x}{g:02x}{b:02x}"


def hex_to_rgb(hexvalue):
    h = hexvalue.lstrip("#")
    rgb = tuple(int(h[i:i + 2], 16) for i in (0, 2, 4))
    return rgb


def loadTkcolorsetfile():
    global ColorSets
    # ===================================================
    # Reads Pickle file as protocol 4
    # ===================================================
    with open("tkinterColors.pickle", "rb") as file:
        tkintercolorset = pickle.load(file)
        return tkintercolorset


def get_the_data(which, colr):
    if which == 0:
        # came from entry
        colorname = colr
        rgbval = get_val(colorname)
        hexval = _from_rgb(rgbval)
        suggested = pick_text_color_based_on_bg_simple(rgbval[0], rgbval[1],
                                                       rgbval[2])

    elif which == 1:
        hexval = colr
        rgbval = hex_to_rgb(hexval)
        colorname = get_key(rgbval)
        suggested = pick_text_color_based_on_bg_simple(rgbval[0], rgbval[1],
                                                       rgbval[2])
    return colorname, hexval, rgbval, suggested


def on_btnExport(*args):
    if _debug:
        print("ColorSetCreator_support.on_btnExport")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global _top93, _w93
    _top93 = tk.Toplevel(root)
    _w93 = ColorSetCreator.FormExport(_top93)
    # Get list of colourset names
    global SetList
    SetList = list(ColorSets.keys())
    # SetList = [*ColorSets]
    # SetList2 = SetList.sorted
    if _debug:
        print(SetList)
    # Load into ScrolledCheckListbox
    # ===================================================
    # Custom Control stuff
    # ===================================================
    LoadCustom()
    # Set the icon for the Toplevel form
    set_icon(_top93)


def LoadCustom():
    # Loads the ScrolledCheckedListBox Custom control
    global SetList
    initialize_custom_widget()


def initialize_custom_widget():
    global SetList
    _w93.Custom1.cback = on_Customclick
    print(SetList)
    print(type(SetList))
    _w93.Custom1.load(SetList)
    clear_label()
    set_labels()


def on_btnGetChecks(*args):
    """
    Support callback function to print the checked items for the ScrolledListCheckbox
    custom control
    """
    if _debug:
        print("widgetdemo_support.on_btnGetChecks")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    lst = _w93.Custom1.get()
    print(lst)


def on_btnClearChecks(*args):
    """
    Support callback function to clear the checks for the ScrolledListCheckbox
    custom control
    """
    if _debug:
        print("widgetdemo_support.on_btnClearChecks")
        for arg in args:
            print("another arg:", arg)
        sys.stdout.flush()
    _w93.Custom1.clear()
    clear_label()


def clear_label():
    _w93.MessageData.set("")


def update_label():
    dat = _w93.Custom1.get()
    lst = []
    for x in dat:
        # print(len(x),x)
        if len(x) == 2:
            t = x[0]
            k = x[1]
            lst.append(t)
        else:
            lst.append(x)
    s = ", ".join(lst)
    # print(f'S-Type: {type(s)} - {s}')
    _w93.MessageData.set(s)


def set_labels():
    pass
    # _w93.Custom1.set(["Appetizer", "Candy", "Breads"])
    # update_label()


def on_Customclick(s=None):
    # ======================================================
    # On event, scrolled frame returns a list containing:
    #    item number selected
    #    text of checkbox selected
    # ======================================================
    update_label()
    if _debug:
        print(_w93.Custom1.get())


# Custom = tk.Frame  # To be updated by user with name of custom widget.
Custom = ScrolledCheckedListBox


def on_ExportDismiss(*args):
    if _debug:
        print("ColorSetCreator_support.on_ExportDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.StatusInfo1.set("")
    _top93.withdraw()


def on_writeFile(*args):
    """
    This function will write an importable file containing the selected coloursets
    and a function that will walk through every widget on the Toplevel form and set
    the widget background and foreground colours no matter if the widget is a Tk widget
    or a ttk widget.
    """
    if _debug:
        print("ColorSetCreator_support.on_writeFile")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global ColorSets
    # Create the colourset dictionaries that were selected
    OurColourSets = ""
    lst = _w93.Custom1.get()
    print(lst)
    exportset = {key: ColorSets[key] for key in lst}
    jsondata = json.dumps(exportset)
    header = """
# ----------------------------
# Import colorset file
# Created by G.D. Walters
# ----------------------------
    """
    imports = """
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
"""

    function = """
def do_tk_widgets(Toplevel, colorset):
    # global colorset

    style = ttk.Style()
    style.theme_use('default')
    no_AB = ['Entry', 'Message', 'Listbox', 'Text', 'Frame', 'Labelframe']
    # Widgets that have no Foreground attributes
    no_FG = ['Frame']
    TWidgets = [
        'TButton', 'TCheckbutton', 'TCombobox', 'TEntry', 'TFrame', 'TLabel',
        'TLabelframe', 'TMenubutton', 'TPanedwindow', 'TNotebook',
        'Horizontal.TProgressbar', 'Vertical.TProgressbar', 'TProgressbar',
        'TRadiobutton', 'Horizontal.TScale', 'Vertical.TScale', 'TScale',
        'TSeparator', 'Treeview', 'TSizeGrip', 'TSpinbox'
    ]
    Containers = ['Frame', 'Labelframe', 'Tframe', 'TLabelframe']
    # ===================================================
    # Start with the Toplevel (Toplevel has no foreground attribute)
    # ===================================================

    Toplevel.configure(bg=colorset['BG1'])

    # ===================================================
    # Now get all the child widgets of the Toplevel, but
    # don't go into containers yet
    # ===================================================
    style.map(
        "TNotebook.Tab",
        background=[("selected", colorset['BG1']), ("active", colorset['BG2']),
                    ("!active", colorset['BG3'])],
        foreground=[("selected", colorset['FG1']), ("active", colorset['FG2']),
                    ("!active", colorset['FG3'])],
    )
    style.map('TButton',
              background=[('disabled', '#d9d9d9'),
                          ('pressed', colorset['BG3']),
                          ('active', colorset['BG2'])],
              foreground=[('disabled', colorset['FG3']),
                          ('pressed', colorset['FG3']),
                          ('active', colorset['FG2'])])
    style.configure('.', background=colorset['BG1'])
    style.configure('.', foreground=colorset['FG1'])

    kids = Toplevel.winfo_children()
    for kid in kids:
        thiskid = kid.winfo_class()
        # ===================================================
        # Try to do the background/foreground colours
        # ===================================================
        print(f'Thiskid: {thiskid}')
        if thiskid in Containers:
            tlftext = f'{thiskid}.Label'
            if thiskid in TWidgets:
                style.configure(thiskid,
                                background=colorset['BG1'],
                                foreground=colorset['FG1'])
                style.configure(tlftext,
                                background=colorset['BG1'],
                                foreground=colorset['FG1'])
                style.configure(thiskid)
            else:
                kid.configure(background=colorset['BG1'],
                              foreground=colorset['FG1'])
            print(f'Thiskid: {thiskid}')
            siblings = kid.winfo_children()
            for sib in siblings:
                print(f'Working {sib} - {sib.winfo_class()}')
                # if thiskid not in TWidgets:
                if sib.winfo_class() not in TWidgets:
                    sib.config(bg=colorset['BG1'])
                    if sib.winfo_class() not in no_FG:
                        sib.config(fg=colorset['FG1'])
                    if sib.winfo_class() not in no_AB:
                        try:
                            sib.config(activebackground=colorset['BG2'])
                            sib.config(activeforeground=colorset['FG2'])
                        except:
                            pass
                else:
                    cls = sib.winfo_class()
                    if cls == 'TFrame':
                        sibs2 = sib.winfo_children()
                        print(sibs2)
                        for si in sibs2:
                            print(si.winfo_class())
                            if (si.winfo_class()
                                    == 'Treeview') or (si.winfo_class()
                                                       == 'TScrollbar'):
                                pass
                            else:
                                si.configure(background=colorset['BG1'],
                                             foreground=colorset['FG1'])
                    if cls == 'TLabel':
                        sib.configure(background=colorset['BG1'],
                                      foreground=colorset['FG1'])

        elif thiskid not in TWidgets:
            print(f'Thiskid: {thiskid} - Kid: {kid}')
            kid.config(bg=colorset['BG1'])
            if thiskid not in no_FG:
                kid.config(fg=colorset['FG1'])
            if thiskid not in no_AB:
                try:
                    kid.config(activebackground=colorset['BG2'])
                    kid.config(activeforeground=colorset['FG2'])
                except:
                    pass
    Toplevel.update()
    
"""
    with open(f"ColorSetImport.py", "w") as data:
        data.writelines(header)
        data.writelines(f"{imports}\n\n")
        data.writelines(f"newset={str(jsondata)}\n\n")
        # data.writelines(mydict)
        # for ln in myset:
        #     data.writelines(f"{ln}\n")
        data.write(function)
    titl = "ColorSetCreator Export To File"
    msg = f"Colorset(s) have been written to a file along with a function to apply it to your project."
    resp = messagebox.showinfo(titl, msg, parent=_top93, icon=messagebox.INFO)
    _w1.StatusInfo1.set('Importable file created.')


def on_btnSaveTarget(*args):
    if _debug:
        print('ColorSetCreator_support.on_btnSaveTarget')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()
    config = configparser.ConfigParser()
    shared.target = _w92.AutoCompTarget.get()
    config["BOOT"] = {
        "ColorSet": shared.whichset,
        "AutoCompTarget": shared.target
    }
    with open("CSC.ini", "w") as configfile:
        config.write(configfile)


def on_hyperlink1():
    address = 'https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color/3943023#3943023'
    webbrowser.open_new(address)


if __name__ == "__main__":
    ColorSetCreator.start_up()

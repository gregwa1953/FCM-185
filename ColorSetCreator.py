#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6b
#  in conjunction with Tcl version 8.6
#    Aug 16, 2022 04:25:43 AM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import ColorSetCreator_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _ana2color)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active',  _tabfg2)])
    style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    style.map('TRadiobutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Treeview',  font="TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1160x729+699+309")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("ColorSet Creator Ver 0.1.2")
        top.configure(highlightcolor="black")

        self.top = top
        self.TEntry1Data = tk.StringVar()
        self.TEntry2Data = tk.StringVar()
        self.TEntry3Data = tk.StringVar()
        self.TEntry4Data = tk.StringVar()
        self.TEntry5Data = tk.StringVar()
        self.TEntry6Data = tk.StringVar()
        self.combobox = tk.StringVar()
        self.StatusTime = tk.StringVar()
        self.StatusInfo1 = tk.StringVar()
        self.StatusInfo2 = tk.StringVar()
        self.che47 = tk.IntVar()
        self.tch76 = tk.IntVar()
        self.selectedButton = tk.IntVar()
        self.che50 = tk.IntVar()
        self.che46 = tk.IntVar()

        _style_code()
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(x=5, y=90, height=576, width=1148)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(2, text='''Page 3''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(3, text='''Page 4''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t5 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t5, padding=3)
        self.TNotebook1.tab(4, text='''Page 5''', compound="left"
                ,underline='''-1''', )

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook1_t1)
        self.TLabelframe1.place(x=5, y=67, height=365, width=380)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''Background Colors''')

        self.TLabel2 = ttk.Label(self.TLabelframe1)
        self.TLabel2.place(x=4, y=50, height=19, width=190, bordermode='ignore')
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='e')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Selected Background Color:''')
        self.TLabel2.configure(compound='left')

        self.TEntry1 = ttk.Entry(self.TLabelframe1)
        self.TEntry1.place(x=196, y=50, height=21, width=114
                , bordermode='ignore')
        self.TEntry1.configure(textvariable=self.TEntry1Data)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, self.tooltip_font, '''The background color of the tab (widget) you are currently on''')

        self.Button1 = tk.Button(self.TLabelframe1)
        self.Button1.place(x=310, y=50, height=23, width=33, bordermode='ignore')

        self.Button1.configure(activebackground="beige")
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(command=lambda :ColorSetCreator_support.on_bgColor(1))
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button1.configure(pady="1")
        self.Button1.configure(text='''...''')

        self.Button2 = tk.Button(self.TLabelframe1)
        self.Button2.place(x=312, y=85, height=23, width=33, bordermode='ignore')

        self.Button2.configure(activebackground="beige")
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(command=lambda :ColorSetCreator_support.on_bgColor(2))
        self.Button2.configure(compound='left')
        self.Button2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button2.configure(pady="1")
        self.Button2.configure(text='''...''')

        self.Button3 = tk.Button(self.TLabelframe1)
        self.Button3.place(x=312, y=120, height=23, width=33
                , bordermode='ignore')
        self.Button3.configure(activebackground="beige")
        self.Button3.configure(borderwidth="2")
        self.Button3.configure(command=lambda :ColorSetCreator_support.on_bgColor(3))
        self.Button3.configure(compound='left')
        self.Button3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button3.configure(pady="1")
        self.Button3.configure(text='''...''')

        self.TEntry2 = ttk.Entry(self.TLabelframe1)
        self.TEntry2.place(x=196, y=85, height=21, width=114
                , bordermode='ignore')
        self.TEntry2.configure(textvariable=self.TEntry2Data)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry2_tooltip = \
        ToolTip(self.TEntry2, self.tooltip_font, '''The background of the tab (widget) the mouse is hovering over''')

        self.TEntry3 = ttk.Entry(self.TLabelframe1)
        self.TEntry3.place(x=196, y=120, height=21, width=114
                , bordermode='ignore')
        self.TEntry3.configure(textvariable=self.TEntry3Data)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry3_tooltip = \
        ToolTip(self.TEntry3, self.tooltip_font, '''The background of all other tabs (widgets)''')

        self.TLabel3 = ttk.Label(self.TLabelframe1)
        self.TLabel3.place(x=4, y=85, height=21, width=190, bordermode='ignore')
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='e')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Active Background Color:''')
        self.TLabel3.configure(compound='left')

        self.TLabel4 = ttk.Label(self.TLabelframe1)
        self.TLabel4.place(x=4, y=120, height=19, width=190, bordermode='ignore')

        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='e')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''InActive Background Color:''')
        self.TLabel4.configure(compound='left')

        self.TLabelframe2 = ttk.Labelframe(self.TNotebook1_t1)
        self.TLabelframe2.place(x=384, y=67, height=365, width=380)
        self.TLabelframe2.configure(relief='')
        self.TLabelframe2.configure(text='''Foreground Colors''')

        self.TLabel5 = ttk.Label(self.TLabelframe2)
        self.TLabel5.place(x=4, y=50, height=21, width=190, bordermode='ignore')
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='e')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Selected Foreground Color:''')
        self.TLabel5.configure(compound='left')

        self.TLabel6 = ttk.Label(self.TLabelframe2)
        self.TLabel6.place(x=4, y=85, height=21, width=190, bordermode='ignore')
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='e')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Active Foreground Color:''')
        self.TLabel6.configure(compound='left')

        self.TLabel7 = ttk.Label(self.TLabelframe2)
        self.TLabel7.place(x=4, y=120, height=21, width=190, bordermode='ignore')

        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='e')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''InActive Foreground Color:''')
        self.TLabel7.configure(compound='left')

        self.TEntry4 = ttk.Entry(self.TLabelframe2)
        self.TEntry4.place(x=196, y=50, height=21, width=114
                , bordermode='ignore')
        self.TEntry4.configure(textvariable=self.TEntry4Data)
        self.TEntry4.configure(takefocus="")
        self.TEntry4.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry4_tooltip = \
        ToolTip(self.TEntry4, self.tooltip_font, '''The Text color of the tab (widget) you are currently on''')

        self.TEntry5 = ttk.Entry(self.TLabelframe2)
        self.TEntry5.place(x=196, y=85, height=21, width=114
                , bordermode='ignore')
        self.TEntry5.configure(textvariable=self.TEntry5Data)
        self.TEntry5.configure(takefocus="")
        self.TEntry5.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry5_tooltip = \
        ToolTip(self.TEntry5, self.tooltip_font, '''The Text color of the tab (widget) the mouse is hovering over''')

        self.TEntry6 = ttk.Entry(self.TLabelframe2)
        self.TEntry6.place(x=196, y=120, height=21, width=114
                , bordermode='ignore')
        self.TEntry6.configure(textvariable=self.TEntry6Data)
        self.TEntry6.configure(takefocus="")
        self.TEntry6.configure(cursor="xterm")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry6_tooltip = \
        ToolTip(self.TEntry6, self.tooltip_font, '''The text color of all the other tabs (widgets)''')

        self.Button4 = tk.Button(self.TLabelframe2)
        self.Button4.place(x=310, y=50, height=23, width=33, bordermode='ignore')

        self.Button4.configure(activebackground="beige")
        self.Button4.configure(borderwidth="2")
        self.Button4.configure(command=lambda :ColorSetCreator_support.on_fgColor(1))
        self.Button4.configure(compound='left')
        self.Button4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button4.configure(pady="1")
        self.Button4.configure(text='''...''')

        self.Button5 = tk.Button(self.TLabelframe2)
        self.Button5.place(x=310, y=85, height=27, width=33, bordermode='ignore')

        self.Button5.configure(activebackground="beige")
        self.Button5.configure(borderwidth="2")
        self.Button5.configure(command=lambda :ColorSetCreator_support.on_fgColor(2))
        self.Button5.configure(compound='left')
        self.Button5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button5.configure(pady="1")
        self.Button5.configure(text='''...''')

        self.Button6 = tk.Button(self.TLabelframe2)
        self.Button6.place(x=310, y=120, height=27, width=33
                , bordermode='ignore')
        self.Button6.configure(activebackground="beige")
        self.Button6.configure(borderwidth="2")
        self.Button6.configure(command=lambda :ColorSetCreator_support.on_fgColor(3))
        self.Button6.configure(compound='left')
        self.Button6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button6.configure(pady="1")
        self.Button6.configure(text='''...''')

        self.chkAutoComputeForeground = tk.Checkbutton(self.TLabelframe2)
        self.chkAutoComputeForeground.place(x=50, y=20, height=23, width=257
                , bordermode='ignore')
        self.chkAutoComputeForeground.configure(activebackground="beige")
        self.chkAutoComputeForeground.configure(anchor='w')
        self.chkAutoComputeForeground.configure(command=ColorSetCreator_support.on_AutoComputeFG)
        self.chkAutoComputeForeground.configure(compound='left')
        self.chkAutoComputeForeground.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.chkAutoComputeForeground.configure(justify='left')
        self.chkAutoComputeForeground.configure(selectcolor="#d9d9d9")
        self.chkAutoComputeForeground.configure(text='''Auto Compute Foregrounds''')
        self.chkAutoComputeForeground.configure(variable=self.che47)

        self.TLabelframe3 = ttk.Labelframe(self.TNotebook1_t1)
        self.TLabelframe3.place(x=763, y=67, height=475, width=380)
        self.TLabelframe3.configure(relief='')
        self.TLabelframe3.configure(text='''Samples''')

        self.TButton3 = ttk.Button(self.TLabelframe3)
        self.TButton3.place(x=20, y=58, height=28, width=83, bordermode='ignore')

        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Tbutton''')
        self.TButton3.configure(compound='left')

        self.TCheckbutton1 = ttk.Checkbutton(self.TLabelframe3)
        self.TCheckbutton1.place(x=20, y=98, width=134, height=21
                , bordermode='ignore')
        self.TCheckbutton1.configure(variable=self.tch76)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Tcheck''')
        self.TCheckbutton1.configure(compound='left')

        self.TLabel8 = ttk.Label(self.TLabelframe3)
        self.TLabel8.place(x=130, y=58, height=29, width=82, bordermode='ignore')

        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='w')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''Tlabel''')
        self.TLabel8.configure(compound='left')

        self.TFrame1 = ttk.Frame(self.TLabelframe3)
        self.TFrame1.place(x=220, y=48, height=75, width=125
                , bordermode='ignore')
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.TRadiobutton1 = ttk.Radiobutton(self.TLabelframe3)
        self.TRadiobutton1.place(x=20, y=128, width=134, height=21
                , bordermode='ignore')
        self.TRadiobutton1.configure(variable=self.selectedButton)
        self.TRadiobutton1.configure(text='''TRadio''')
        self.TRadiobutton1.configure(compound='left')

        self.TLabelframe4 = ttk.Labelframe(self.TLabelframe3)
        self.TLabelframe4.place(x=160, y=138, height=75, width=150
                , bordermode='ignore')
        self.TLabelframe4.configure(relief='')
        self.TLabelframe4.configure(text='''Tlabelframe''')

        self.TSeparator1 = ttk.Separator(self.TLabelframe3)
        self.TSeparator1.place(x=360, y=58, height=160, bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.Label1 = tk.Label(self.TLabelframe3)
        self.Label1.place(x=30, y=238, height=3, width=329, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(borderwidth="2")
        self.Label1.configure(compound='left')
        self.Label1.configure(relief="groove")

        self.Button7 = tk.Button(self.TLabelframe3)
        self.Button7.place(x=30, y=291, height=33, width=73, bordermode='ignore')

        self.Button7.configure(activebackground="beige")
        self.Button7.configure(borderwidth="2")
        self.Button7.configure(compound='left')
        self.Button7.configure(text='''Button''')

        self.Checkbutton2 = tk.Checkbutton(self.TLabelframe3)
        self.Checkbutton2.place(x=30, y=331, height=23, width=127
                , bordermode='ignore')
        self.Checkbutton2.configure(activebackground="beige")
        self.Checkbutton2.configure(anchor='w')
        self.Checkbutton2.configure(compound='left')
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(selectcolor="#d9d9d9")
        self.Checkbutton2.configure(text='''Checkbutton''')
        self.Checkbutton2.configure(variable=self.che50)

        self.Radiobutton1 = tk.Radiobutton(self.TLabelframe3)
        self.Radiobutton1.place(x=30, y=360, height=23, width=128
                , bordermode='ignore')
        self.Radiobutton1.configure(activebackground="beige")
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(selectcolor="#d9d9d9")
        self.Radiobutton1.configure(text='''Radiobutton''')
        self.Radiobutton1.configure(variable=self.selectedButton)

        self.Frame2 = tk.Frame(self.TLabelframe3)
        self.Frame2.place(x=217, y=291, height=75, width=125
                , bordermode='ignore')
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")

        self.Label2 = tk.Label(self.TLabelframe3)
        self.Label2.place(x=125, y=297, height=21, width=69, bordermode='ignore')

        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(borderwidth="2")
        self.Label2.configure(compound='left')
        self.Label2.configure(relief="sunken")
        self.Label2.configure(text='''Label''')

        self.Label3 = tk.Label(self.TLabelframe3)
        self.Label3.place(x=120, y=20, height=21, width=139, bordermode='ignore')

        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(compound='left')
        self.Label3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label3.configure(text='''ttk::Widgets''')

        self.Label4 = tk.Label(self.TLabelframe3)
        self.Label4.place(x=125, y=256, height=21, width=129
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor='w')
        self.Label4.configure(compound='left')
        self.Label4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label4.configure(text='''Tk::Widgets''')

        self.Labelframe1 = tk.LabelFrame(self.TLabelframe3)
        self.Labelframe1.place(x=200, y=380, height=75, width=150
                , bordermode='ignore')
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Labelframe''')

        self.TCombobox1 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox1.place(x=790, y=30, height=21, width=177)
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")

        self.TLabel1 = ttk.Label(self.TNotebook1_t1)
        self.TLabel1.place(x=790, y=10, height=19, width=172)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Available ColorSets''')
        self.TLabel1.configure(compound='left')

        self.TButton1 = ttk.Button(self.TNotebook1_t1)
        self.TButton1.place(x=120, y=450, height=28, width=183)
        self.TButton1.configure(command=ColorSetCreator_support.on_ApplyColors)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Apply Colors''')
        self.TButton1.configure(compound='left')

        self.TButton2 = ttk.Button(self.TNotebook1_t1)
        self.TButton2.place(x=120, y=490, height=28, width=183)
        self.TButton2.configure(command=ColorSetCreator_support.on_SaveNewColorSet)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Save New ColorSet''')
        self.TButton2.configure(compound='left')

        self.Checkbutton1 = tk.Checkbutton(self.TNotebook1_t1)
        self.Checkbutton1.place(x=980, y=28, height=23, width=147)
        self.Checkbutton1.configure(activebackground="beige")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(command=ColorSetCreator_support.on_chkDisableWidgets)
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1.configure(text='''Disable Widgets''')
        self.Checkbutton1.configure(variable=self.che46)

        self.btnTab2Return = tk.Button(self.TNotebook1_t2)
        self.btnTab2Return.place(x=466, y=253, height=43, width=213)
        self.btnTab2Return.configure(activebackground="beige")
        self.btnTab2Return.configure(borderwidth="2")
        self.btnTab2Return.configure(command=ColorSetCreator_support.on_btnReturn)
        self.btnTab2Return.configure(compound='left')
        self.btnTab2Return.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnTab2Return.configure(text='''RETURN TO MAIN TAB''')

        self.btnTab2Return_1 = tk.Button(self.TNotebook1_t3)
        self.btnTab2Return_1.place(x=466, y=253, height=43, width=213)
        self.btnTab2Return_1.configure(activebackground="beige")
        self.btnTab2Return_1.configure(borderwidth="2")
        self.btnTab2Return_1.configure(command=ColorSetCreator_support.on_btnReturn)
        self.btnTab2Return_1.configure(compound='left')
        self.btnTab2Return_1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnTab2Return_1.configure(text='''RETURN TO MAIN TAB''')

        self.btnTab2Return_1_1 = tk.Button(self.TNotebook1_t4)
        self.btnTab2Return_1_1.place(x=466, y=253, height=43, width=213)
        self.btnTab2Return_1_1.configure(activebackground="beige")
        self.btnTab2Return_1_1.configure(borderwidth="2")
        self.btnTab2Return_1_1.configure(command=ColorSetCreator_support.on_btnReturn)
        self.btnTab2Return_1_1.configure(compound='left')
        self.btnTab2Return_1_1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnTab2Return_1_1.configure(text='''RETURN TO MAIN TAB''')

        self.btnTab2Return_1_1_1 = tk.Button(self.TNotebook1_t5)
        self.btnTab2Return_1_1_1.place(x=466, y=253, height=43, width=213)
        self.btnTab2Return_1_1_1.configure(activebackground="beige")
        self.btnTab2Return_1_1_1.configure(borderwidth="2")
        self.btnTab2Return_1_1_1.configure(command=ColorSetCreator_support.on_btnReturn)
        self.btnTab2Return_1_1_1.configure(compound='left')
        self.btnTab2Return_1_1_1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnTab2Return_1_1_1.configure(text='''RETURN TO MAIN TAB''')

        self.TPanedwindow1 = ttk.Panedwindow(self.TNotebook1_t5
                , orient="horizontal")
        self.TPanedwindow1.place(x=80, y=70, height=200, width=205)
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, width=75
                , text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p1.configure(text='''Pane 1''')
        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text='Pane 2')

        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.TPanedwindow1_p2.configure(text='''Pane 2''')
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TScale1 = ttk.Scale(self.TNotebook1_t5, from_=0, to=1.0)
        self.TScale1.place(x=340, y=70, height=100, width=17)
        self.TScale1.configure(orient="vertical")
        self.TScale1.configure(takefocus="")

        self.TScale2 = ttk.Scale(self.TNotebook1_t5, from_=0, to=1.0)
        self.TScale2.place(x=410, y=80, height=17, width=100)
        self.TScale2.configure(takefocus="")

        self.TProgressbar1 = ttk.Progressbar(self.TNotebook1_t5)
        self.TProgressbar1.place(x=70, y=290, width=100, height=19)

        self.Scrolledtreeview1 = ScrolledTreeView(self.TNotebook1_t5)
        self.Scrolledtreeview1.place(x=680, y=60, height=101, width=140)
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="63")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="63")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(x=5, y=670, height=55, width=1148)
        self.Frame1.configure(relief='sunken')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="sunken")

        self.lblStatusTime = tk.Label(self.Frame1)
        self.lblStatusTime.place(x=1036, y=3, height=49, width=109)
        self.lblStatusTime.configure(activebackground="#f9f9f9")
        self.lblStatusTime.configure(compound='left')
        self.lblStatusTime.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusTime.configure(relief="sunken")
        self.lblStatusTime.configure(text='''Label''')
        self.lblStatusTime.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''Label''')

        self.lblStatusInfo1 = tk.Label(self.Frame1)
        self.lblStatusInfo1.place(x=3, y=3, height=49, width=542)
        self.lblStatusInfo1.configure(activebackground="#f9f9f9")
        self.lblStatusInfo1.configure(anchor='w')
        self.lblStatusInfo1.configure(compound='left')
        self.lblStatusInfo1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusInfo1.configure(padx="5")
        self.lblStatusInfo1.configure(relief="sunken")
        self.lblStatusInfo1.configure(text='''Label''')
        self.lblStatusInfo1.configure(textvariable=self.StatusInfo1)
        self.StatusInfo1.set('''Label''')

        self.lblStatusInfo2 = tk.Label(self.Frame1)
        self.lblStatusInfo2.place(x=546, y=3, height=49, width=489)
        self.lblStatusInfo2.configure(activebackground="#f9f9f9")
        self.lblStatusInfo2.configure(anchor='w')
        self.lblStatusInfo2.configure(compound='left')
        self.lblStatusInfo2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusInfo2.configure(padx="5")
        self.lblStatusInfo2.configure(relief="sunken")
        self.lblStatusInfo2.configure(text='''Label''')
        self.lblStatusInfo2.configure(textvariable=self.StatusInfo2)
        self.StatusInfo2.set('''Label''')

        self.frameBtnBar = tk.Frame(self.top)
        self.frameBtnBar.place(x=2, y=0, height=55, width=1156)
        self.frameBtnBar.configure(relief='groove')
        self.frameBtnBar.configure(borderwidth="2")
        self.frameBtnBar.configure(relief="groove")

        self.btnExit = tk.Button(self.frameBtnBar)
        self.btnExit.place(x=1102, y=4, height=45, width=45)
        self.btnExit.configure(activebackground="beige")
        self.btnExit.configure(borderwidth="2")
        self.btnExit.configure(command=ColorSetCreator_support.on_btnExit)
        self.btnExit.configure(font="-family {DejaVu Sans} -size 11 -weight bold -slant italic")
        photo_location = os.path.join(_location,"./Assets/application-exit.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btnExit.configure(image=_img0)
        self.btnExit.configure(text='''Exit''')
        self.tooltip_font = "TkDefaultFont"
        self.btnExit_tooltip = \
        ToolTip(self.btnExit, self.tooltip_font, '''Exit This Application''')

        self.btnHelp = tk.Button(self.frameBtnBar)
        self.btnHelp.place(x=1029, y=4, height=45, width=45)
        self.btnHelp.configure(activebackground="beige")
        self.btnHelp.configure(borderwidth="2")
        self.btnHelp.configure(command=ColorSetCreator_support.on_btnHelp)
        photo_location = os.path.join(_location,"./Assets/help-contents32.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.btnHelp.configure(image=_img1)
        self.btnHelp.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnHelp_tooltip = \
        ToolTip(self.btnHelp, self.tooltip_font, '''Help''')

        self.btnInfo = tk.Button(self.frameBtnBar)
        self.btnInfo.place(x=979, y=4, height=45, width=45)
        self.btnInfo.configure(activebackground="beige")
        self.btnInfo.configure(borderwidth="2")
        self.btnInfo.configure(command=ColorSetCreator_support.on_btnInfo)
        photo_location = os.path.join(_location,"./Assets/information.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.btnInfo.configure(image=_img2)
        self.btnInfo.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnInfo_tooltip = \
        ToolTip(self.btnInfo, self.tooltip_font, '''Get Information on this Program''')

        self.btnSaveToJSON = tk.Button(self.frameBtnBar)
        self.btnSaveToJSON.place(x=8, y=4, height=45, width=45)
        self.btnSaveToJSON.configure(activebackground="beige")
        self.btnSaveToJSON.configure(borderwidth="2")
        self.btnSaveToJSON.configure(command=ColorSetCreator_support.on_btnSaveToJSON)
        photo_location = os.path.join(_location,"./Assets/document-save.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.btnSaveToJSON.configure(image=_img3)
        self.btnSaveToJSON.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnSaveToJSON_tooltip = \
        ToolTip(self.btnSaveToJSON, self.tooltip_font, '''Save Colorset Information to JSON File''')

        self.btnLoadFromJSON = tk.Button(self.frameBtnBar)
        self.btnLoadFromJSON.place(x=59, y=4, height=45, width=45)
        self.btnLoadFromJSON.configure(activebackground="beige")
        self.btnLoadFromJSON.configure(borderwidth="2")
        self.btnLoadFromJSON.configure(command=ColorSetCreator_support.on_btnLoadFromJSON)
        photo_location = os.path.join(_location,"./Assets/document-open.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.btnLoadFromJSON.configure(image=_img4)
        self.btnLoadFromJSON.configure(state='disabled')
        self.btnLoadFromJSON.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnLoadFromJSON_tooltip = \
        ToolTip(self.btnLoadFromJSON, self.tooltip_font, '''Load Colorset Informatin from JSON File''')

        self.btnViewer = tk.Button(self.frameBtnBar)
        self.btnViewer.place(x=163, y=4, height=45, width=45)
        self.btnViewer.configure(activebackground="beige")
        self.btnViewer.configure(borderwidth="2")
        self.btnViewer.configure(command=ColorSetCreator_support.on_btnViewer)
        photo_location = os.path.join(_location,"./Assets/notebook.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.btnViewer.configure(image=_img5)
        self.btnViewer.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnViewer_tooltip = \
        ToolTip(self.btnViewer, self.tooltip_font, '''View ColorSet Definitions''')

        self.btnInternet = tk.Button(self.frameBtnBar)
        self.btnInternet.place(x=303, y=4, height=45, width=45)
        self.btnInternet.configure(activebackground="beige")
        self.btnInternet.configure(borderwidth="2")
        self.btnInternet.configure(command=ColorSetCreator_support.on_btnInternet)
        photo_location = os.path.join(_location,"./Assets/internet.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.btnInternet.configure(image=_img6)
        self.btnInternet.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnInternet_tooltip = \
        ToolTip(self.btnInternet, self.tooltip_font, '''Open Colorhut.co in Web Browser for Color Scheme Ideas''')

        self.lblVSep1 = tk.Label(self.frameBtnBar)
        self.lblVSep1.place(x=400, y=1, height=53, width=3)
        self.lblVSep1.configure(activebackground="#f9f9f9")
        self.lblVSep1.configure(anchor='w')
        self.lblVSep1.configure(borderwidth="3")
        self.lblVSep1.configure(compound='left')
        self.lblVSep1.configure(relief="groove")

        self.lblVSep2 = tk.Label(self.frameBtnBar)
        self.lblVSep2.place(x=125, y=1, height=53, width=3)
        self.lblVSep2.configure(activebackground="#f9f9f9")
        self.lblVSep2.configure(anchor='w')
        self.lblVSep2.configure(borderwidth="3")
        self.lblVSep2.configure(compound='left')
        self.lblVSep2.configure(relief="groove")

        self.lblVSep3 = tk.Label(self.frameBtnBar)
        self.lblVSep3.place(x=247, y=1, height=53, width=3)
        self.lblVSep3.configure(activebackground="#f9f9f9")
        self.lblVSep3.configure(anchor='w')
        self.lblVSep3.configure(borderwidth="3")
        self.lblVSep3.configure(compound='left')
        self.lblVSep3.configure(relief="groove")

        self.lblVSep4 = tk.Label(self.frameBtnBar)
        self.lblVSep4.place(x=1089, y=1, height=53, width=3)
        self.lblVSep4.configure(activebackground="#f9f9f9")
        self.lblVSep4.configure(anchor='w')
        self.lblVSep4.configure(borderwidth="3")
        self.lblVSep4.configure(compound='left')
        self.lblVSep4.configure(relief="groove")

        self.lblVSep1_1 = tk.Label(self.frameBtnBar)
        self.lblVSep1_1.place(x=954, y=1, height=53, width=3)
        self.lblVSep1_1.configure(activebackground="#f9f9f9")
        self.lblVSep1_1.configure(anchor='w')
        self.lblVSep1_1.configure(borderwidth="3")
        self.lblVSep1_1.configure(compound='left')
        self.lblVSep1_1.configure(relief="groove")

        self.btnConfig = tk.Button(self.frameBtnBar)
        self.btnConfig.place(x=780, y=4, height=45, width=45)
        self.btnConfig.configure(activebackground="beige")
        self.btnConfig.configure(borderwidth="2")
        self.btnConfig.configure(command=ColorSetCreator_support.on_btnConfig)
        photo_location = os.path.join(_location,"./Assets/applications-system.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.btnConfig.configure(image=_img7)
        self.btnConfig.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnConfig_tooltip = \
        ToolTip(self.btnConfig, self.tooltip_font, '''Preferences''')

        self.btnConfig_1 = tk.Button(self.frameBtnBar)
        self.btnConfig_1.place(x=570, y=4, height=45, width=45)
        self.btnConfig_1.configure(activebackground="beige")
        self.btnConfig_1.configure(borderwidth="2")
        self.btnConfig_1.configure(command=ColorSetCreator_support.on_btnGetInfo)
        photo_location = os.path.join(_location,"./Assets/edit-find.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.btnConfig_1.configure(image=_img8)
        self.btnConfig_1.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnConfig_1_tooltip = \
        ToolTip(self.btnConfig_1, self.tooltip_font, '''Examine ttk Layouts''')

        self.lblVSep1_2 = tk.Label(self.frameBtnBar)
        self.lblVSep1_2.place(x=483, y=1, height=53, width=3)
        self.lblVSep1_2.configure(activebackground="#f9f9f9")
        self.lblVSep1_2.configure(anchor='w')
        self.lblVSep1_2.configure(borderwidth="3")
        self.lblVSep1_2.configure(compound='left')
        self.lblVSep1_2.configure(relief="groove")

        self.btnExport = tk.Button(self.frameBtnBar)
        self.btnExport.place(x=423, y=4, height=45, width=45)
        self.btnExport.configure(activebackground="beige")
        self.btnExport.configure(borderwidth="2")
        self.btnExport.configure(command=ColorSetCreator_support.on_btnExport)
        photo_location = os.path.join(_location,"./Assets/insert-text.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.btnExport.configure(image=_img9)
        self.btnExport.configure(text='''Button''')
        self.tooltip_font = "TkDefaultFont"
        self.btnExport_tooltip = \
        ToolTip(self.btnExport, self.tooltip_font, '''Export Colorset(s) To Python File''')

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

class Info:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("405x455+1350+368")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("Colorset Creator Info")
        top.configure(background="gray58")
        top.configure(highlightcolor="black")

        self.top = top
        self.AuthorData = tk.StringVar()
        self.InfoVersionData = tk.StringVar()
        self.InfoAboutData = tk.StringVar()

        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=40, y=30, height=21, width=89)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='e')
        self.Label1.configure(background="gray58")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label1.configure(padx="3")
        self.Label1.configure(text='''Author:''')

        self.lblAuthor = tk.Label(self.top)
        self.lblAuthor.place(x=140, y=30, height=21, width=189)
        self.lblAuthor.configure(activebackground="#f9f9f9")
        self.lblAuthor.configure(anchor='w')
        self.lblAuthor.configure(background="gray58")
        self.lblAuthor.configure(compound='left')
        self.lblAuthor.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.lblAuthor.configure(text='''Label''')
        self.lblAuthor.configure(textvariable=self.AuthorData)
        self.AuthorData.set('''Label''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(x=30, y=60, height=21, width=99)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='e')
        self.Label2.configure(background="gray58")
        self.Label2.configure(compound='left')
        self.Label2.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label2.configure(padx="3")
        self.Label2.configure(text='''Version:''')

        self.Label3 = tk.Label(self.top)
        self.Label3.place(x=140, y=60, height=21, width=159)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="gray58")
        self.Label3.configure(compound='left')
        self.Label3.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label3.configure(text='''1.3''')
        self.Label3.configure(textvariable=self.InfoVersionData)
        self.InfoVersionData.set('''1.3''')

        self.btnInfoDismiss = tk.Button(self.top)
        self.btnInfoDismiss.place(x=136, y=390, height=33, width=133)
        self.btnInfoDismiss.configure(activebackground="#f9f9f9")
        self.btnInfoDismiss.configure(background="gray58")
        self.btnInfoDismiss.configure(borderwidth="2")
        self.btnInfoDismiss.configure(command=ColorSetCreator_support.on_btnInfoDismiss)
        self.btnInfoDismiss.configure(compound='left')
        self.btnInfoDismiss.configure(text='''Dismiss''')

        self.Message1 = tk.Message(self.top)
        self.Message1.place(x=26, y=130, height=191, width=352)
        self.Message1.configure(anchor='nw')
        self.Message1.configure(background="gray58")
        self.Message1.configure(borderwidth="2")
        self.Message1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Message1.configure(padx="1")
        self.Message1.configure(pady="1")
        self.Message1.configure(relief="groove")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(textvariable=self.InfoAboutData)
        self.InfoAboutData.set('''Message''')
        self.Message1.configure(width=352)

        self.Label4 = tk.Label(self.top)
        self.Label4.place(x=30, y=100, height=22, width=68)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="gray58")
        self.Label4.configure(compound='left')
        self.Label4.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label4.configure(text='''About:''')

class CSViewer:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("805x657+858+336")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("ColorSet Viewer")
        top.configure(background="gray58")
        top.configure(highlightcolor="black")

        self.top = top

        self.Frame1_1 = tk.Frame(self.top)
        self.Frame1_1.place(x=3, y=68, height=585, width=798)
        self.Frame1_1.configure(relief='sunken')
        self.Frame1_1.configure(borderwidth="2")
        self.Frame1_1.configure(relief="sunken")
        self.Frame1_1.configure(background="gray58")

        _style_code()
        self.Scrolledtext1 = ScrolledText(self.Frame1_1)
        self.Scrolledtext1.place(x=4, y=4, height=575, width=790)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="word")

        self.btnViewerDismiss = tk.Button(self.top)
        self.btnViewerDismiss.place(x=660, y=17, height=33, width=123)
        self.btnViewerDismiss.configure(activebackground="#f9f9f9")
        self.btnViewerDismiss.configure(borderwidth="2")
        self.btnViewerDismiss.configure(command=ColorSetCreator_support.on_btnViewerDismiss)
        self.btnViewerDismiss.configure(compound='left')
        self.btnViewerDismiss.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnViewerDismiss.configure(text='''Dismiss''')

class CSConfig:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("967x735+824+295")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("ColorSet Creator Configuration")
        top.configure(background="gray58")
        top.configure(highlightcolor="black")

        self.top = top
        self.comboStartupSet = tk.StringVar()
        self.comboToDelete = tk.StringVar()
        self.AutoCompTarget = tk.StringVar()
        self.tch55 = tk.IntVar()
        self.selectedButton = tk.IntVar()

        self.btnDismiss = tk.Button(self.top)
        self.btnDismiss.place(x=400, y=670, height=33, width=203)
        self.btnDismiss.configure(activebackground="beige")
        self.btnDismiss.configure(borderwidth="2")
        self.btnDismiss.configure(command=ColorSetCreator_support.on_ConfigBtnDismiss)
        self.btnDismiss.configure(compound='left')
        self.btnDismiss.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.btnDismiss.configure(text='''Dismiss''')

        _style_code()
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(x=10, y=30, height=606, width=942)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''General''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t1.configure(borderwidth="2")
        self.TNotebook1_t1.configure(relief="sunken")
        self.TNotebook1_t1.configure(background="gray53")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''Auto Foreground Computation'''
                ,compound="left", underline='''-1''', )
        self.TNotebook1_t2.configure(background="gray53")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(2, text='''Future''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t3.configure(background="gray53")

        self.Label1_1 = tk.Label(self.TNotebook1_t1)
        self.Label1_1.place(x=40, y=80, height=21, width=189)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='e')
        self.Label1_1.configure(background="gray53")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label1_1.configure(padx="3")
        self.Label1_1.configure(text='''ColorSet on Start Up:''')

        self.TCombobox2 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox2.place(x=235, y=80, height=21, width=177)
        self.TCombobox2.configure(exportselection="0")
        self.TCombobox2.configure(textvariable=self.comboStartupSet)
        self.TCombobox2.configure(takefocus="")

        self.btnSet = tk.Button(self.TNotebook1_t1)
        self.btnSet.place(x=440, y=70, height=33, width=133)
        self.btnSet.configure(activebackground="beige")
        self.btnSet.configure(borderwidth="2")
        self.btnSet.configure(command=ColorSetCreator_support.on_ConfigBtnSet)
        self.btnSet.configure(compound='left')
        self.btnSet.configure(font="-family {DejaVu Sans} -size 10 -weight bold -slant italic")
        self.btnSet.configure(text='''Set''')

        self.Label2_1 = tk.Label(self.TNotebook1_t1)
        self.Label2_1.place(x=40, y=127, height=21, width=189)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(anchor='e')
        self.Label2_1.configure(background="gray53")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label2_1.configure(text='''Remove ColorSet:''')

        self.TCombobox3 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox3.place(x=235, y=126, height=21, width=177)
        self.TCombobox3.configure(exportselection="0")
        self.TCombobox3.configure(textvariable=self.comboToDelete)
        self.TCombobox3.configure(takefocus="")

        self.btnDelete = tk.Button(self.TNotebook1_t1)
        self.btnDelete.place(x=440, y=120, height=33, width=133)
        self.btnDelete.configure(activebackground="beige")
        self.btnDelete.configure(borderwidth="2")
        self.btnDelete.configure(command=ColorSetCreator_support.on_ConfigBtnDelete)
        self.btnDelete.configure(compound='left')
        self.btnDelete.configure(font="-family {DejaVu Sans} -size 10 -weight bold -slant italic")
        self.btnDelete.configure(text='''Delete''')

        self.TFrame1_1 = ttk.Frame(self.TNotebook1_t1)
        self.TFrame1_1.place(x=100, y=242, height=265, width=445)
        self.TFrame1_1.configure(relief='groove')
        self.TFrame1_1.configure(borderwidth="2")
        self.TFrame1_1.configure(relief="groove")

        self.Label3_1 = tk.Label(self.TFrame1_1)
        self.Label3_1.place(x=20, y=11, height=21, width=129)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(anchor='w')
        self.Label3_1.configure(compound='left')
        self.Label3_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label3_1.configure(text='''Samples:''')

        self.ConfTButton1 = ttk.Button(self.TFrame1_1)
        self.ConfTButton1.place(x=40, y=60, height=28, width=103)
        self.ConfTButton1.configure(takefocus="")
        self.ConfTButton1.configure(text='''Tbutton''')
        self.ConfTButton1.configure(compound='left')

        self.ConfTCheckbutton1 = ttk.Checkbutton(self.TFrame1_1)
        self.ConfTCheckbutton1.place(x=180, y=60, width=94, height=21)
        self.ConfTCheckbutton1.configure(variable=self.tch55)
        self.ConfTCheckbutton1.configure(takefocus="")
        self.ConfTCheckbutton1.configure(text='''Tcheck''')
        self.ConfTCheckbutton1.configure(compound='left')

        self.ConfTRadiobutton1 = ttk.Radiobutton(self.TFrame1_1)
        self.ConfTRadiobutton1.place(x=290, y=60, width=116, height=21)
        self.ConfTRadiobutton1.configure(variable=self.selectedButton)
        self.ConfTRadiobutton1.configure(text='''TRadio''')
        self.ConfTRadiobutton1.configure(compound='left')

        self.ConfTNotebook1 = ttk.Notebook(self.TFrame1_1)
        self.ConfTNotebook1.place(x=50, y=110, height=136, width=302)
        self.ConfTNotebook1.configure(takefocus="")
        self.ConfTNotebook1_t1 = tk.Frame(self.ConfTNotebook1)
        self.ConfTNotebook1.add(self.ConfTNotebook1_t1, padding=3)
        self.ConfTNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.ConfTNotebook1_t2 = tk.Frame(self.ConfTNotebook1)
        self.ConfTNotebook1.add(self.ConfTNotebook1_t2, padding=3)
        self.ConfTNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.ConfTNotebook1_t3 = tk.Frame(self.ConfTNotebook1)
        self.ConfTNotebook1.add(self.ConfTNotebook1_t3, padding=3)
        self.ConfTNotebook1.tab(2, text='''Page 3''', compound="left"
                ,underline='''-1''', )

        self.Label7 = tk.Label(self.TNotebook1_t2)
        self.Label7.place(x=50, y=50, height=22, width=169)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(anchor='e')
        self.Label7.configure(background="gray53")
        self.Label7.configure(compound='left')
        self.Label7.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label7.configure(text='''Target Value:''')

        self.Button8 = tk.Button(self.TNotebook1_t2)
        self.Button8.place(x=370, y=45, height=33, width=113)
        self.Button8.configure(activebackground="beige")
        self.Button8.configure(borderwidth="2")
        self.Button8.configure(compound='left')
        self.Button8.configure(text='''Save''')

        self.Label8 = tk.Label(self.TNotebook1_t2)
        self.Label8.place(x=200, y=200, height=21, width=529)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(background="gray53")
        self.Label8.configure(compound='left')
        self.Label8.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label8.configure(text='''See the following link for a discussion of this value...''')

        self.Label9 = tk.Label(self.TNotebook1_t2)
        self.Label9.place(x=90, y=260, height=81, width=799)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(background="gray53")
        self.Label9.configure(compound='left')
        self.Label9.configure(font="-family {DejaVu Sans} -size 12 -weight bold -underline 1")
        self.Label9.configure(foreground="blue")
        self.Label9.configure(text='''https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color/3943023#3943023''')
        self.Label9.configure(wraplength="740")

        self.Entry1 = tk.Entry(self.TNotebook1_t2)
        self.Entry1.place(x=240, y=50, height=23, width=116)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=self.AutoCompTarget)

class FormExport:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("846x692+861+380")
        top.minsize(1, 1)
        top.maxsize(4225, 1410)
        top.resizable(0,  0)
        top.title("Export")
        top.configure(background="gray58")
        top.configure(highlightcolor="black")
        top.configure(padx="5")
        top.configure(pady="5")

        self.top = top
        self.MessageData = tk.StringVar()

        self.Frame3 = tk.Frame(self.top)
        self.Frame3.place(x=20, y=171, height=495, width=315)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")

        self.Custom1 = ColorSetCreator_support.Custom(self.Frame3)
        self.Custom1.place(x=4, y=4, height=486, width=306)

        self.Message2 = tk.Message(self.top)
        self.Message2.place(x=364, y=120, height=121, width=312)
        self.Message2.configure(anchor='nw')
        self.Message2.configure(background="gray58")
        self.Message2.configure(borderwidth="3")
        self.Message2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Message2.configure(padx="5")
        self.Message2.configure(pady="5")
        self.Message2.configure(relief="groove")
        self.Message2.configure(text='''Message''')
        self.Message2.configure(textvariable=self.MessageData)
        self.MessageData.set('''Message''')
        self.Message2.configure(width=312)

        self.Label5 = tk.Label(self.top)
        self.Label5.place(x=30, y=100, height=23, width=196)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="gray58")
        self.Label5.configure(compound='left')
        self.Label5.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.Label5.configure(text='''Available Colour Sets''')

        self.Label6 = tk.Label(self.top)
        self.Label6.place(x=370, y=80, height=22, width=219)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="gray58")
        self.Label6.configure(compound='left')
        self.Label6.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label6.configure(text='''ColourSets to be Exported''')

        self.btnExportDismiss = tk.Button(self.top)
        self.btnExportDismiss.place(x=690, y=20, height=33, width=123)
        self.btnExportDismiss.configure(activebackground="beige")
        self.btnExportDismiss.configure(borderwidth="2")
        self.btnExportDismiss.configure(command=ColorSetCreator_support.on_ExportDismiss)
        self.btnExportDismiss.configure(compound='left')
        self.btnExportDismiss.configure(text='''Dismiss''')

        self.btnWriteFile = tk.Button(self.top)
        self.btnWriteFile.place(x=440, y=420, height=33, width=213)
        self.btnWriteFile.configure(activebackground="beige")
        self.btnWriteFile.configure(borderwidth="2")
        self.btnWriteFile.configure(command=ColorSetCreator_support.on_writeFile)
        self.btnWriteFile.configure(compound='left')
        self.btnWriteFile.configure(text='''Write File''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    ColorSetCreator_support.main()

if __name__ == '__main__':
    ColorSetCreator_support.main()




